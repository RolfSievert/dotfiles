#!/bin/sh
#
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source. The hook's purpose is to edit the commit
# message file.
# If the hook fails with a non-zero status, the commit is aborted.
#

### User configuration
TICKET_PREFIX="Issue #"
TICKET_SUFFIX=""
LINE_SEPARATOR=$' - '
###

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# only format if a commit message is provided
if [ "$COMMIT_SOURCE" != "message" ]; then
    exit 0
fi

### Extract issue ticket and format commit message
branch_name=$(git symbolic-ref --short HEAD 2>/dev/null)
issue_number=$(echo "$branch_name" | grep -oE '[0-9]+')

# only add line separator to
# - uncommented lines
# - lines not already a list item
# - lines not linking a github issue
result=$(awk -v prefix="$LINE_SEPARATOR" '
    !/^(\s*#|\s*-|\s*\+|\s*\*|\s*[a-zA-Z]+\s*#[0-9]+)/ && NF {
        count++;
        print prefix $0;
        next
    }
    { print }
    END { print count }
' < $COMMIT_MSG_FILE)

new_commit_msg=$(echo "$result" | head -n -1)  # Exclude the last line (count)
modified_lines=$(echo "$result" | tail -n 1)

if [ -n "$issue_number" ]; then
    newline=$'\n'
    new_commit_msg="$TICKET_PREFIX$issue_number$newline$new_commit_msg"

elif [ "$modified_lines" -lt 2 ]; then
    # do not format message with single line without an issue number
    exit 0
fi

echo "$new_commit_msg" > $COMMIT_MSG_FILE
